package me.tick.lccmythicmobsutilities;

import io.lumine.mythic.core.utils.annotations.MythicCondition;
import io.lumine.mythic.core.utils.annotations.MythicField;
import io.lumine.mythic.core.utils.annotations.MythicMechanic;
import me.tick.lccmythicmobsutilities.events.ConditionsEvent;
import me.tick.lccmythicmobsutilities.events.MechanicsEvent;
import me.tick.lccmythicmobsutilities.models.ConditionEntry;
import me.tick.lccmythicmobsutilities.models.MechanicEntry;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class DocumentationGenerator {

    // method that writes generate() to a file
    public static void writeToFile() throws IOException {
        File folder = LccMythicmobsUtilities.getPlugin().getDataFolder();
        if (!folder.exists()) {
            folder.mkdir();
        }
        String path = folder + File.separator + "documentation.md";
        File file = new File(path);
        if (!file.exists()) {
            file.createNewFile();
        }
        FileWriter writer = new FileWriter(path);
        writer.write(generate() + System.lineSeparator());
        writer.close();
    }

    public static String generate() {
        String conditions = generateConditions();
        String mechanics = generateMechanics();
        String sep = System.lineSeparator() + System.lineSeparator();
        return "# LCC MythicMobs Utilities - Autogenerated Documentation" + sep + "## Conditions" + sep + conditions + sep + "## Mechanics" + sep + mechanics;
    }

    public static String generateConditions() {
        List<String> conditionEntries = new ArrayList<>();
        LccMythicmobsUtilities.getPlugin().getLogger().info(
                "Generating documentation for conditions "
                        + String.join(", ", ConditionsEvent.conditions.stream().map(Class::getSimpleName).toList()))
        ;
        ConditionsEvent.conditions.forEach((condition) -> {
            LccMythicmobsUtilities.getPlugin().getLogger().log(java.util.logging.Level.INFO, "Generating docs for condition " + condition.getName());
            List<String> components = new ArrayList<>();
            ConditionEntry annotation = condition.getAnnotation(ConditionEntry.class);
            if (annotation == null) {
                return;
            }
            MythicCondition data = annotation.data();
            components.add("### Condition: `" + data.name() + "`");
            components.addAll(generateGeneric(data.description(), annotation.examples(), annotation.fields()));
            conditionEntries.add(String.join(System.lineSeparator() + System.lineSeparator(), components));
        });
        return String.join(System.lineSeparator() + System.lineSeparator(), conditionEntries);
    }

    public static String generateMechanics() {
        List<String> mechanicEntries = new ArrayList<>();
        LccMythicmobsUtilities.getPlugin().getLogger().info(
                "Generating documentation for mechanics "
                        + String.join(", ", MechanicsEvent.mechanics.stream().map(Class::getSimpleName).toList()));
        MechanicsEvent.mechanics.forEach((mechanic) -> {
            LccMythicmobsUtilities.getPlugin().getLogger().log(java.util.logging.Level.INFO, "Generating docs for mechanic " + mechanic.getName());
            List<String> components = new ArrayList<>();
            MechanicEntry annotation = mechanic.getAnnotation(MechanicEntry.class);
            if (annotation == null) {
                return;
            }
            MythicMechanic data = annotation.data();
            components.add("### Mechanic: `" + data.name() + "`");
            components.addAll(generateGeneric(data.description(), annotation.examples(), annotation.fields()));
            mechanicEntries.add(String.join(System.lineSeparator() + System.lineSeparator(), components));
        });
        return String.join(System.lineSeparator() + System.lineSeparator(), mechanicEntries);
    }

    public static List<String> generateGeneric(String description, String[] examples, MythicField[] fields) {
        List<String> components = new ArrayList<>();
        components.add(description);
        if (examples.length > 0) {
            components.add("#### Examples");
            for (String example : examples) {
                components.add("```yml" + System.lineSeparator() + example + System.lineSeparator() + "```");
            }
        }
        if (fields.length > 0) {
            components.add("#### Fields");
            for (MythicField field : fields) {
                components.addAll(generateField(field));
            }
        }
        return components;
    }

    public static List<String> generateField(MythicField field) {
        List<String> components = new ArrayList<>();
        components.add("- **" + field.name() + "**"
                + (!field.description().equals("") ? " - " + field.description() : "")
                + (field.aliases().length != 0 ? "\n\n  Aliases: " + String.join(", ", Arrays.stream(field.aliases()).map(str -> "`" + str + "`").toList()) : "")
                + (!field.defValue().equals("") ? "\n\n  Default: `" + field.defValue() + "`" : ""));
        return components;
    }
}
